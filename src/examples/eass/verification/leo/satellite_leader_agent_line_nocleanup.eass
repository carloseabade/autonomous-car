// ----------------------------------------------------------------------------
// Copyright (C) 2012 Louise A. Dennis, Michael Fisher, Nicholas K. Lincoln, Alexei
// Lisitsa and Sandor M. Veres
//
// This file is part of the Engineering Autonomous Space Software (EASS) Library.
// 
// The EASS Library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// The EASS Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the EASS Library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// 
// To contact the authors:
// http://www.csc.liv.ac.uk/~lad
//
//----------------------------------------------------------------------------

EASS

:name: aglead
				
:Initial Beliefs:
				
agent(ag1)
agent(ag2)
agent(ag3)
agent(ag4)

pos(line, left)
pos(line, right)
pos(line, middle)
pos(square, topleft)
pos(square, topright)
pos(square, bottomleft)
pos(square, bottomright)
						
desired_formation(square)

:Reasoning Rules:
			
all_positions_assigned(line) :- position(Ag1, left), position(Ag2, right), position(Ag3, middle);
all_positions_assigned(square) :- position(Ag1, topleft), position(Ag2, topright), position(Ag3, bottomleft), position(Ag4, bottomright);
in_formation(square) :- agent_at(topleft), agent_at(topright), agent_at(bottomleft), agent_at(bottomright);
in_formation(line) :- agent_at(left), agent_at(right), agent_at(middle);
agent_at(Pos) :-    position(Ag, Pos),  maintaining(Ag);
some_formation :-  desired_formation(F1),  in_formation(F1);
aformation :-  in_formation(line);
aformation :-  in_formation(square);

			

				
:Initial Goals:
some_formation [perform]
				
:Plans:
+.received(:tell, LG): {~B LG} <- +LG;
			
+! some_formation [perform] : {~ B formation(F), B desired_formation(Form)} <-
  +! in_formation(Form) [perform];
+! some_formation [perform] : {B formation(F), B desired_formation(F)} <- 
  +! in_formation(F) [perform];
			
+! in_formation(F) [perform] : {True} <-
  +formation(F),
  +! all_positions_assigned(F) [achieve],
  +! inform_start(ag1) [perform],
  +! inform_start(ag2) [perform],
  +! inform_start(ag3) [perform],
  +! inform_start(ag4) [perform];
//  *in_formation(F);
			
+! all_positions_assigned(Formation) [achieve] : {B agent(Ag), ~B position(Ag, X), B pos(Formation, Y), ~B position(Ag2, Y), ~B broken(Ag)} <- 
  .send(Ag, :tell, position(Y)), 
  +position(Ag, Y), +informed(Ag, Formation);
			
+! inform_start(Ag) [perform] : {B position(Ag, X), B formation(F)} <-
  .send(Ag, :achieve, assuming_formation(F));
 // +informed(Ag, F);
+! inform_start(Ag) [perform] : {~ B position(Ag, X)};
 
+! inform_start [achieve] : {B position(Ag, X), B formation(F), ~B informed(Ag, F)} <-
  .send(Ag, :achieve, assuming_formation(F)),
  +informed(Ag, F);
						
