GWENDOLEN

:name: vehicle

:Initial Beliefs:

:Reasoning Rules:

finish_all_rides :- done_all_rides;

reach(X,Y) :- try_to_reach(X,Y), at(X,Y);

drive_to(X,Y) :- at(X,Y);

obstacle_ahead(DIRECTION) :- at(AT_X, AT_Y), obstacle(DIRECTION, AT_X, AT_Y);

known_route(north,KR_X,KR_Y) :- at(AT_X,AT_Y), from(F_X,F_Y), adapt_from_to(F_X,F_Y, AT_X,AT_Y, north, KR_X,KR_Y), moved_from_to(F_X,F_Y,AT_X, AT_Y, south, KR_X, KR_Y);
known_route(south,KR_X,KR_Y) :- at(AT_X,AT_Y), from(F_X,F_Y), adapt_from_to(F_X,F_Y, AT_X,AT_Y, south, KR_X,KR_Y), moved_from_to(F_X,F_Y,AT_X, AT_Y, north, KR_X, KR_Y);
known_route(east,KR_X,KR_Y) :-  at(AT_X,AT_Y), from(F_X,F_Y), adapt_from_to(F_X,F_Y, AT_X,AT_Y, east, KR_X,KR_Y), moved_from_to(F_X,F_Y,AT_X, AT_Y, west, KR_X, KR_Y);
known_route(west,KR_X,KR_Y) :-  at(AT_X,AT_Y), from(F_X,F_Y), adapt_from_to(F_X,F_Y, AT_X,AT_Y, west, KR_X,KR_Y), moved_from_to(F_X,F_Y,AT_X, AT_Y, east, KR_X, KR_Y);

north_south :- north;
north_south :- south;
east_west :- east;
east_west :- west;


can_adapt(CA_D, D_X, D_Y) :- at(AT_X, AT_Y), ~obstacle(CA_D, AT_X, AT_Y), ~known_route(CA_D, D_X, D_Y);
can_adapt_route(CA_D, D_X, D_Y) :- can_adapt(CA_D, D_X, D_Y), go_adapt(CA_D);

go_adapt(north) :- ~adapt(south), go_adapt(north_south);
go_adapt(south) :- ~adapt(north), go_adapt(north_south);
go_adapt(east) :- ~adapt(west), go_adapt(east_west);
go_adapt(west) :- ~adapt(east), go_adapt(east_west);

go_adapt(north_south)	:- ~heading(north), ~heading(south), ~adapt(east), ~adapt(west);
go_adapt(east_west) 	:- ~heading(east), ~heading(west), ~adapt(north), ~adapt(south);

control_emergency (X,Y) :- ~crashed(X,Y);

:Initial Goals:

finish_all_rides [achieve]

:Plans:
/* FAR 1 */
+!finish_all_rides [achieve] : {~B at(X,Y)} <- localize, *at(LX, LY);

/* FAR 2 */
+!finish_all_rides [achieve] : {B damaged(high)}  <- refuse_ride(car_unavailable), park(car_unavailable), +done_all_rides; 
/* FAR 3.1 */
+!finish_all_rides [achieve] : {B damaged(moderate), B depot(X,Y), B passenger} <- park(drop_off), -passenger, refuse_ride(drop_off), +!complete_journey (X, Y) [perform], park(depot), +done_all_rides; 
/* FAR 3.2 */
+!finish_all_rides [achieve] : {B damaged(moderate), B depot(X,Y), ~B passenger} <- refuse_ride(pick_up), +!complete_journey (X, Y) [perform], park(depot), +done_all_rides; 
/* FAR 4 */
+!finish_all_rides [achieve] : {B no_possible_new_ride, B damaged(low), B depot(X,Y)} <- print("Going back to Depot to be repaired."), +!complete_journey (X, Y) [perform], park(depot), +done_all_rides;
/* FAR 5 */
+!finish_all_rides [achieve] : {B no_possible_new_ride, ~B damaged(DAMAGE_LEVEL)} <- park(done_all_rides), +done_all_rides;

/* FAR 6 */
+!finish_all_rides [achieve] : {~B ride_info, ~B no_possible_new_ride} <- get_ride, *ride_info;

/* FAR 7.1 */
+!finish_all_rides [achieve] : {B pick_up(X,Y),  B obstacle(center, X,Y)} <- refuse_ride(pick_up), -ride_info;
/* FAR 7.2 */
+!finish_all_rides [achieve] : {B drop_off(X,Y), B obstacle(center, X,Y), ~B passenger} <- refuse_ride(drop_off), -ride_info;

/* FAR 8.1 */
+!finish_all_rides [achieve] : {B pick_up(X,Y), ~B try_to_reach(X,Y), ~B passenger} <- +!complete_journey (X,Y) [perform], +try_to_reach(X,Y);					
/* FAR 8.2 */
+!finish_all_rides [achieve] : {B pick_up(X,Y), B reach(X,Y), ~B passenger} <- park(pick_up), +passenger, -try_to_reach(X,Y);	
/* FAR 8.3 */
+!finish_all_rides [achieve] : {B pick_up(X,Y), ~B reach(X,Y), ~B passenger} <- refuse_ride(pick_up), -try_to_reach(X,Y), -ride_info;				
			
/* FAR 9.1 */					
+!finish_all_rides [achieve] : {B drop_off(X,Y), ~B try_to_reach(X,Y), B passenger} <- +!complete_journey (X,Y) [perform], +try_to_reach(X,Y);
/* FAR 9.2 */
+!finish_all_rides [achieve] : {B drop_off(X,Y), B reach(X,Y), B passenger} <- park(drop_off), -passenger, -try_to_reach(X,Y), -ride_info;
/* FAR 9.3 */
+!finish_all_rides [achieve] : {B drop_off(X,Y), ~B reach(X,Y), B passenger} <- refuse_ride(drop_off), -passenger, park(drop_off), -try_to_reach(X,Y), -ride_info;	
					

/* CJ */
+!complete_journey (X,Y) [perform] : {B at(F_X,F_Y)} 
                                      <-    +!clear_travel_data [perform], 
                                            +from(F_X,F_Y), +moving, 
                                            +!drive_to(X,Y) [achieve], 
                                            -moving, -from(F_X,F_Y);

/* CTD */
+!clear_travel_data [perform] : {True} <- +!clear_direction_data [perform], -heading(north), -heading(south), -heading(east), -heading(west);

/* CDD */
+!clear_direction_data [perform] : {True}  <- +!clear_adapt [perform], -north, -south, -east, -west, -receive_direction;
								
/* CA */                                        
+!clear_adapt [perform] : {True} <- -adapt(north), -adapt(south), -adapt(east), -adapt(west);

/* DT 1 */
+!drive_to(X,Y) [achieve] : {~B north, ~B south, ~B east, ~B west} <- +!get_direction [perform];

/* DT 2.1 */
+!drive_to(X,Y) [achieve] : {~B heading(H), B north} <- +heading(north);
/* DT 2.2 */
+!drive_to(X,Y) [achieve] : {~B heading(H), B south} <- +heading(south);
/* DT 2.3 */
+!drive_to(X,Y) [achieve] : {~B heading(H), B east}  <- +heading(east);
/* DT 2.4 */
+!drive_to(X,Y) [achieve] : {~B heading(H), B west}  <- +heading(west);

/* DT 3.1 */
+!drive_to(X,Y) [achieve] : {B heading(north), B at(AT_X,Y), B east}  <- -heading(north), +heading(east); 
/* DT 3.2 */
+!drive_to(X,Y) [achieve] : {B heading(north), B at(AT_X,Y), B west}  <- -heading(north), +heading(west); 
/* DT 3.3 */
+!drive_to(X,Y) [achieve] : {B heading(south), B at(AT_X,Y), B east}  <- -heading(south), +heading(east);
/* DT 3.4 */
+!drive_to(X,Y) [achieve] : {B heading(south), B at(AT_X,Y), B west}  <- -heading(south), +heading(west); 

/* DT 4 */
+!drive_to(X,Y) [achieve] : {B blocked} <- -blocked, -!drive_to(X,Y) [achieve];

/* DT 5 */
+!drive_to(X,Y) [achieve] : {B at(AT_X, AT_Y), B unavoidable_collision(AT_X, AT_Y)}  <- -moving, +!choose_obstacle_collision [perform]; 

/* DT 6.1 */
+!drive_to(X,Y) [achieve] : {B heading(D), B obstacle_ahead(D)} <- -moving, +adapt, +!adapt_route(D,X,Y) [achieve];        
/* DT 6.2 */
+!drive_to(X,Y) [achieve] : {B heading(D), B known_route(D,X,Y)} <- -moving, +adapt, +!adapt_route(D,X,Y) [achieve];        

/* DT 7 */
+!drive_to(X,Y) [achieve] : {~B moving} <- print(waiting), *moving;
	
/* DT 8 */
+!drive_to(X,Y) [achieve] : {B heading(D), B can_adapt(D,X,Y)} <- +!drive_direction(D) [perform];

/* GD */
+!get_direction [perform] : {G drive_to(X, Y) [achieve]} <- +!clear_travel_data [perform], compass(X, Y), *receive_direction;
    
/* DD */
+!drive_direction(D) [perform] : {G drive_to(X, Y) [achieve], B from(F_X,F_Y)} <- -moving, drive(F_X,F_Y, D, X, Y);
						
            
/* COC 1.1 */
+!choose_obstacle_collision [perform] : 
            {B at(AT_X, AT_Y), B obstacle_damage(AT_X, AT_Y, DIRECTION, low)} 
            <- +!colide_obstacle(DIRECTION, low) [perform];
						
            
/* COC 1.2 */                               
+!choose_obstacle_collision [perform] : 
            {B at(AT_X, AT_Y), B obstacle_damage(AT_X, AT_Y, DIRECTION, moderate)} 
            <- +!colide_obstacle(DIRECTION, moderate) [perform];
            
/* COC 1.3 */                               
+!choose_obstacle_collision [perform] : 
            {B at(AT_X, AT_Y), B obstacle_damage(AT_X, AT_Y, DIRECTION, high)} 
            <- +!colide_obstacle(DIRECTION, high) [perform];

/* CO 1 */									
+!colide_obstacle(DIRECTION, DAMAGE_LEVEL) [perform] : 
            {B from(F_X,F_Y), B at(AT_X, AT_Y), G drive_to(X, Y) [achieve]} 
            <- no_further_from(F_X,F_Y, AT_X, AT_Y, X,Y), *no_further(F_X,F_Y, AT_X, AT_Y, X,Y),
            +damaged(DAMAGE_LEVEL),
            +!drive_direction(DIRECTION) [perform], -moving,
            +!get_direction [perform], +moving;

/* AR 1 */
+!adapt_route(D,X,Y) [achieve] : {B at(AT_X, AT_Y), B unavoidable_collision(AT_X, AT_Y)} 
            <- -adapt, +!choose_obstacle_collision [perform], +!clear_adapt [perform], -!adapt_route(D,X,Y) [achieve];

/* AR 2 */
+!adapt_route(D,X,Y) [achieve] : {B obstacle_ahead(north), B obstacle_ahead(south), B obstacle_ahead(east), B obstacle_ahead(west)}
            <- print("surrounded by obstacles"), +blocked, -!adapt_route(D,X,Y) [achieve];
/* AR 3 */                              
+!adapt_route(D,X,Y) [achieve] : {B adapt, B can_adapt(D,X,Y)} 
            <- -adapt, +!clear_adapt [perform], +!drive_direction(D) [perform], +!get_direction [perform], -!adapt_route(D,X,Y) [achieve];
                                
/* AR 4 */
+!adapt_route(D,X,Y) [achieve] : {~B adapt} <- *adapt;

/* AR 5.1 */
+!adapt_route(D,X,Y) [achieve] : {B can_adapt_route(east,X,Y), B east, B north_south} 
            <- -adapt, print("Simple Belief North or South to East"), +!adapt_drive_direction(east,X,Y) [perform]; 
/* AR 5.2 */
+!adapt_route(D,X,Y) [achieve] : {B can_adapt_route(west,X,Y), B west, B north_south} 
            <- -adapt, print("Simple Belief North or South to West"), +!adapt_drive_direction(west,X,Y) [perform];
/* AR 5.3 */
+!adapt_route(D,X,Y) [achieve] : {B north, B can_adapt_route(north,X,Y), B east_west} 
            <- -adapt,  print("Simple Belief East or West to North"), +!adapt_drive_direction(north,X,Y) [perform];
/* AR 5.4 */
+!adapt_route(D,X,Y) [achieve] : {B south, B can_adapt_route(south,X,Y), B east_west} 
            <- -adapt,  print("Simple Belief East or West to South"), +!adapt_drive_direction(south,X,Y) [perform];

/* AR 6.1 */                        
+!adapt_route(D,X,Y) [achieve] : {B can_adapt_route(east,X,Y), B north_south} 
            <- -adapt, print("Reroute North or South to East"), +!adapt_drive_direction(east,X,Y) [perform]; 
/* AR 6.2 */    
+!adapt_route(D,X,Y) [achieve] : {B can_adapt_route(west,X,Y), B north_south} 
            <- -adapt, print("Reroute North or South to West"), +!adapt_drive_direction(west,X,Y) [perform];  
/* AR 6.3 */     
+!adapt_route(D,X,Y) [achieve] : {B can_adapt_route(north,X,Y), B east_west} 
            <- -adapt, print("Reroute East or West to North"), +!adapt_drive_direction(north,X,Y) [perform];
/* AR 6.4 */    
+!adapt_route(D,X,Y) [achieve] : {B can_adapt_route(south,X,Y), B east_west} 
            <- -adapt, print("Reroute East or West to South"), +!adapt_drive_direction(south,X,Y) [perform];


/* AR 7.1 */
+!adapt_route(D,X,Y) [achieve] : {B can_adapt(north,X,Y), ~B can_adapt(south,X,Y), ~B can_adapt(east,X,Y), ~B can_adapt(west,X,Y)}
            <- -adapt, print("Go back north"), +!invalid_coordinate(north) [perform]; 
/* AR 7.2 */
+!adapt_route(D,X,Y) [achieve] : {~B can_adapt(north,X,Y), B can_adapt(south,X,Y), ~B can_adapt(east,X,Y), ~B can_adapt(west,X,Y)}
            <- -adapt, print("Go back south"), +!invalid_coordinate(south) [perform];
/* AR 7.3 */
+!adapt_route(D,X,Y) [achieve] : {~B can_adapt(north,X,Y), ~B can_adapt(south,X,Y), ~B can_adapt(east,X,Y), B can_adapt(west,X,Y)}
            <- -adapt, print("Go back west"), +!invalid_coordinate(west) [perform];
/* AR 7.4 */
+!adapt_route(D,X,Y) [achieve] : {~B can_adapt(north,X,Y), ~B can_adapt(south,X,Y), B can_adapt(east,X,Y), ~B can_adapt(west,X,Y)}
            <- -adapt, print("Go back east"), +!invalid_coordinate(east) [perform];
                                        
/* AR 8.1 */                                
+!adapt_route(D,X,Y) [achieve] : {~B can_adapt(north,X,Y), B can_adapt(south,X,Y)}
            <- -adapt, print("NS Cant keep going north"), +!invalid_coordinate(south) [perform];                                            
/* AR 8.2 */
+!adapt_route(D,X,Y) [achieve] : {~B can_adapt(south,X,Y), B can_adapt(north,X,Y)}
            <- -adapt, print("NS Cant keep going south"), +!invalid_coordinate(north) [perform];                         
/* AR 8.3 */
+!adapt_route(D,X,Y) [achieve] : {~B can_adapt(east,X,Y), B can_adapt(west,X,Y)}
            <- -adapt, print("EW Cant keep going east"), +!invalid_coordinate(west) [perform];                 
/* AR 8.4 */
+!adapt_route(D,X,Y) [achieve] : {~B can_adapt(west,X,Y), B can_adapt(east,X,Y)}
            <- -adapt, print("EW Cant keep going west"), +!invalid_coordinate(east) [perform];                                  
/* AR 9*/                            
+!adapt_route(D,X,Y) [achieve] : {B at(AT_X, AT_Y)} <-
					print("Missing Adapt Route to reach destination"), 
					+missing_adapt_route(AT_X, AT_Y, D, X, Y),
					+blocked, -!adapt_route(D,X,Y) [achieve];
					

/* ADD */   
+!adapt_drive_direction(A_D,X,Y) [perform] : {True} 
            <- +adapt(A_D), +!drive_direction(A_D) [perform], -moving, +adapt;
            
/* IC */					
+!invalid_coordinate(TD) [perform] : 
            {G adapt_route(D,X,Y) [achieve], B at(AT_X, AT_Y), B from(F_X,F_Y)} 
            <- no_further_from(F_X,F_Y, AT_X,AT_Y, X, Y), *no_further(F_X,F_Y, AT_X,AT_Y, X, Y), 
            +!clear_adapt [perform], +!drive_direction(TD) [perform], -moving, +adapt;

/* O 1 */
+obstacle(center, X, Y) : {B pick_up(X, Y), ~B temp_obstacle(X, Y)} <- -moving, -adapt, -!drive_to(DX, DY) [achieve], -!adapt_route(D,DX,DY) [achieve];
/* O 2 */
+obstacle(center, X, Y) : {B drop_off(X, Y), ~B temp_obstacle(X, Y)} <- -moving, -adapt, -!drive_to(DX, DY) [achieve], -!adapt_route(D,DX,DY) [achieve];

/* A 1 */
+at(AT_X,AT_Y) : {~B obstacle(center, AT_X,AT_Y)} <- +moving;

/* A 2 */
+at(AT_X,AT_Y) : {B obstacle(center, AT_X, AT_Y)} 
            <- -moving, -adapt, +crashed(AT_X, AT_Y), 
            +!control_emergency (AT_X,AT_Y) [achieve];

/* CE 1 */
+!control_emergency (AT_X, AT_Y) [achieve] : {B crashed(AT_X, AT_Y), ~B emergency(AT_X, AT_Y)} 
            <- call_emergency(AT_X,AT_Y), *emergency(AT_X,AT_Y);

/* CE 2 */
+!control_emergency (AT_X, AT_Y) [achieve] : 
            {B emergency(AT_X,AT_Y), B damaged(low), 
            ~B damaged(moderate), ~B damaged(high)} 
            <-  get_assistance(AT_X,AT_Y), *assisted(AT_X,AT_Y),
            -crashed(AT_X,AT_Y), -!adapt_route(D,X,Y) [achieve];
            
/* CE 3 */
+!control_emergency (AT_X, AT_Y) [achieve] : 
            {B emergency(AT_X, AT_Y), B damaged(moderate), ~B damaged(high)} 
            <- get_assistance(AT_X, AT_Y), *assisted(AT_X, AT_Y),
            -crashed(AT_X,AT_Y), -!adapt_route(D,X,Y) [achieve];

/* CE 4 */
+!control_emergency (AT_X, AT_Y) [achieve] : 
            {B emergency(AT_X, AT_Y), B damaged(high)} 
            <- -!drive_to(X,Y) [achieve], -!adapt_route(D,X,Y) [achieve], 
            -crashed(AT_X,AT_Y);